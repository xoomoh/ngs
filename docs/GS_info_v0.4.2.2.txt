====== history begin ======
02.11.06  v0.1  Initial release by LVD.

03-06.11.06  v0.1.1 boleg
- 12 мгц кварц - считать такты 20мгц
+ DMAGS
? - системный порт со стороны ZX - #B3 при активном DOS
? - другая модель маппинга  16к страниц
? - разводка под 4Мб (см. ниже)

06-xx.12.06 v0.2 lvd
+ - кварцы: 24 МГц и 20 МГц
+ - другой маппинг памяти (как boleg предложил)
+ - прерывания
+ - 2/4 Мб разводка и адресация
? - DMA не правил
? - поясните плиз про $b3 из тырдоса и чем он лучше $33 из отовсюду :)

26.01.07 v0.3 (lvd)
? - оформлен режим ДМА
+ - несколько новых идей (прерывания, буферизованный звук)
? - уточнены элементы схемы
? - уточнён интерфейс со спектрумом (zx-bus, порты)
? - вместо 'шин' - распределение пинов ФПГАшки, но пока пусто

08.02.07 v0.3.1 (lvd)
+ - подправлен ДМА
+ - подправлено про выбор частоты зетника, добавлено про распределение каналов

10.03.07 v0.3.2 (lvd)
? - непонятки с портом $0b - то ли установка из порта $06 (txt schem), то ли из порта $09 (orig schem)

01.03.08 v0.4 (lvd)
+ - подправлено поведение порта $0b по ПЦБ старого ГСа
+ - описано поведение порта $33 со стороны спека
+ - подправлено описание порта $0f
- - убрана некоторая чушь - есть же схема
- - убраны слова про 4 мегабайта

23.05.08 v0.4.1 (lvd)
+ - уточнена работа порта $33
+ - уточнена работа прерываний в штатной прошивке
+ - добавлена часть "ближайшие планы", в ней запись про SPI-интерфейсы с соответствующими устройствами.

14.09.08 v0.4.1.1 (lvd)
+ - некоторые багфиксы в тексте.

16.10.08 v0.4.2 (lvd)
+ - убраны 'фантазии' про ДМА etc. (чтобы по мере реализации подхватить текст из более старых версий)

28.10.08 v0.4.2.1 (lvd)
+ - добавлено описание бита _MDHLF (половинная скорость передачи данных в mp3-декодер)

======= history end =======



Часть 1. Возможности штатной прошивки fpga

  --== Порты со стороны спектрума ==--

порт $B3, запись - регистр данных GS (на запись), устанавливает data bit (см. ниже).

порт $B3, чтение - регистр данных GS (на чтение), сбрасывает data bit.

порт $BB, запись - регистр команд GS (на запись, аналогично регистру данных), устанавливает command bit.

порт $BB, чтение - биты состояния GS:
 D7 - data bit
 D6..D1 - не определены
 D0 - command bit

порт $33  - аппаратный сброс GS,
а также выдача НМИ на процессор ГСа (для расширения возможностей коммуникации) и управление светодиодом

запись $80 - подача сброса на Z80 и требующих сброса цепей fpga.
запись $40 - NMI на Z80.
запись $20 - переключить светодиод

Сигналы на ZX-BUS:

a0-a7, (дешифрация портов)
d0-d7,
/IORQ
/WR
/RD
IORQGE

a15,a14
/MREQ
/CSROM (сигнал выборки пзу, который проходит через резистор и превращается в
        /RDROM, который идёт непосредственно в ПЗУ)
/RDROM
/WAIT (эти все сигналы для DMA)





  --== Порты со стороны GSового зетника ==--

порт $00, запись - порт страниц по адресу $8000-$FFFF (32k кусок), d6..d0, 7 бит (2 мегабайта всего), при ресете - неопределён.

порт $01, чтение. Читать байт, записанный спектрумом в регистр команд.

порт $02, чтение. Читать байт, записанный спектрумом в регистр данных, сбрасывает data bit.

порт $03, запись. Записать байт в регистр данных, который может прочитать спектрум, устанавливает data bit.

порт $04, чтение. Чтение битов состояния (то же самое, что и для спектрума в порту $BB)

порт $05, запись или чтение. Сброс command bit в 0.

порты $06-$09, запись. Установка громкости в каналах 1-4. d5..d0, 6 бит, unsigned, 0 - off, 63 - max

порт $0a, запись или чтение. Установка data bit равным инверсному нулевому биту содержимого порта $00.

порт $0b, запись или чтение. Установка command bit равным пятому биту содержимого порта $09 (PCB)

порт $0f, запись И чтение (того, что записано).

 bit 0 - NO ROM bit: 1 - подключена только RАМ,
                     0 - $4000-$7fff RАМ, остальное FLASH со страницами такими же как RAM.

 bit 1 - RAM RO bit: 1 - страница 0 RAM (абсолютные адреса 0..32767) защищена от записи (эмуляция ROM оригинального GS)
                     0 - не защищена от записи.

 bit 2 - 8 channels bit: 1 - 8 каналов (см. ниже),
                         0 - 4 канала (как в оригинальном ГС).

 bit 3 - extended paging mode bit: 1 - расширенный режим страниц (см. ниже)
                                   0 - память переключается как в оригинальном GS.

 bit 5,4 - z80 overclocking bits: 00 - Z80 работает на частоте 24МГц
                                  01 - Z80 работает на частоте 12МГц
                                  10 - Z80 работает на частоте 20МГц
                                  11 - Z80 работает на частоте 10МГц

 bits 6,7 - пока неиспользуемые, должны устанавливаться в ноль.

ПРИ АППАРАТНОМ СБРОСЕ содержимое порта $0f сбрасывается в 00110000 (соответственно конфигурируя железо, Z80 на 10МГц).


порт $10, запись. Расширенный порт страниц, используется, когда extended paging mode bit = 1 (см. выше). При ресете - неопределён.

 Модель страниц в расширенном режиме такова:
 порт $00 - страница (16к кусок), включенная по адресам $8000-$bfff, d7..d0, 8 бит.
 порт $10 - страница (16к кусок), включенная по адресам $c000-$ffff, d7..d0, 8 бит.

 В режиме обычной адресации страниц (соответствующей оригинальному GS) при записи в порт $00 значение
 транслируется в регистры, соответствующие страницам по адресам $8000-$bfff и $c000-$ffff таким образом,
 что при переключении в режим расширенной адресации куски, замапленные в эти области, не изменяются.
 При переключении из режима расширенной адресации в режим обычной - в этих областях опять же маппинг не
 меняется, однако при первой же записи в порт $00 всё вернётся на свои места.



Модель маппинга страниц.
расширенный режим:

порт  #00 - axxx xxxx
порт  #10 - byyy yyyy
тогда абсолютные номера малых страниц:
#8000-#BFFF - xxxx xxxa
#C000-#FFFF - yyyy yyyb
hint - имея в A номер малой страницы, делаем RRCA и выводим его в порт.

обычный режим:
порт  #00 - zxxx xxxx - (z - любой)
тогда абсолютные номера малых страниц:
#8000-#BFFF - xxxx xxx0
#C000-#FFFF - xxxx xxx1

Т.о. при переходе из обычного режима в расширенный по адресам #8000-#BFFF номер малой
страницы не меняется (при условии, что бит 6 в порту #00 = 0, либо принудительно его сбрасывать, при переходе в обычный
режим), а по адресам #C000-#FFFF имеем малую страницу, заданную в порту #10.


порты $16-$19, запись. Установка громкости в каналах 5-8. d5..d0, 6 бит, unsigned, 0 - off, 63 - max

 Эти каналы существуют только в режиме, когда 8 channels bit = 1. В режиме эмуляции оригинального GS
 при записи данных в каналы 1-4 эти данные автоматически копируются в каналы 5-8, т.о. громкость канала
 в 4-канальном режиме больше, чем в 8-канальном.


  --== модель памяти ==--

Вначале рассмотрим режим NO ROM (см. выше):

 Понятия: большая страница - кусок нарезанной по 32к RAM,
          малая страница - кусок нарезанной по 16к RAM.

 $0000-$3FFF - нулевая малая страница или первая половина нулевой большой страницы
 $4000-$7FFF - третья малая страница или вторая половина первой большой страницы

 $8000-$FFFF - указанная в порту $00 большая страница (для режима обычной адресации страниц)
  или
 $8000-$BFFF - указанная в порту $00 малая страница и
 $C000-$FFFF - указанная в порту $10 малая страница (для режима расширенной адресации страниц)


 в режиме RAM RO (см. выше) защищаются от записи нулевая и первая малые страницы (нулевая большая страница) RAM,
 т.е. первые 32к.

 в режиме NO ROM bit = 0 - во областях $0000-$3FFF и $8000-$FFFF включается FLASH с теми же адресами, что были бы
 для RAM, в области $4000-$7FFF - остаётся та же самая малая страница RAM. Защита от записи действует так же
 (защищены от записи первые 32к FLASH, что может помешать при её прошивке, потому RAM RO надо отключать).


Кроме того, при ЧТЕНИИ процессором с адресов $6000-$7FFF (при чтении циклом чтения, а НЕ циклом M1!) происходит следующее:

Для 4-канального режима:
 При чтении с адресов $6000-$60FF считанный байт идёт в регистр сэмпла 1ого канала.
 При чтении с адресов $6100-$61FF - в регистр семпла 2ого канала
 $6200-$62FF - 3его канала
 $6300-$63FF - 4ого канала
 $6400-$64FF - снова 1ого канала и так далее до $7F00-$7FFF - идёт в 4ый канал.

Для 8-канального режима аналогично:
 $60xx - 1ый
 $61xx - 2ой
 $62xx - 3
 $63xx - 4
 $64xx - 5
 $65xx - 6
 $66xx - 7
 $67xx - 8
 $68xx - 1
 и так далее до $7Fxx.

Распределение каналов по лево-праву:

1,2,5,6 - левые
3,4,7,8 - правые


  --== Прерывания ==--

Частота прерываний на /INT - 37500 Гц.

Максммальная длительность /INT - 100 тактов 24 МГц, но он кончается, если проц взял прерывание: (/M1 or /IORQ)=0



 Часть 2. MP3 и SD-card

Для связи с MP3-чипом (ma8201, аналог vs1001) используется
2 канала spi. Первый работает только на передачу, передаёт
непосредственно mp3-данные. Второй - управляющий, двунаправленный.

Для связи с SD-карточкой используется 1 spi-канал.

Кроме того, у интерфейса с MP3-чипом есть входная линия DREQ и выходная
XRESET.

SD-card интерфейс имеет 2 входных линии DET и WP.

управляющий мр3-чипом spi-интерфейс и spi-интерфейс sd-карточки имеют
сигналы nCS (инверсные).


каждый полный SPI имеет порты:

_SEND - (только запись) запускает на передачу выведенный в него байт,
                        принятый в запущенном цикле обмена байт будет
                        доступен в следующих портах:

_READ - (только чтение) читает принятый в предыдущем цикле обмена байт.

_RSTR - (только чтение) Read and STaRt: читает ранее принятый байт,
                        запускает новый цикл обмена. При этом передаваемое
                        значение =$FF (порт может отсутствовать для
                        некоторых интерфейсов, где не требуется предельная
                        скорость).


Все SPI-интерфейсы тактируются от процессорного клока, а цикл обмена занимает 16 тактов.
Это значит, что последовательные действия, запускающие цикл обмена (запись в _SEND-порт или чтение _RSTR-порта)
не могут идти чаще, чем раз в 16 тактов, иначе возможны непредсказуемые для данного SPI-канала последствия.
16 тактов отмеряются между моментами начала циклов ввода-вывода процессора Z80 (см. даташит).

Рассмотрим вышеописанное на примере вывода последовательности байт:

 out (_SEND),A
 inc A
 out (_SEND),A - НЕВЕРНО!!!! между выводами проходит 15 тактов!!!

 out (_SEND),A
 ld  A,123
 out (_SEND),A - верно (18 тактов)

 ld  C,_SEND
 out (C),D
 nop
 out (C),E - верно (16 тактов)

 outi
 outi - верно (16 тактов)

 otir - верно (21 такт)


Сигналы nCS должны выбирать низким уровнем устройство, с которым производится обмен данных, до начала обмена
и оставаться в низком уровне как минимум до конца передачи.
ВНИМАНИЕ: между циклом ввода-вывода процессора Z80, начинающим обмен по SPI, и циклом ввода-вывода, устанавливающим
nCS соответствующего интерфейса в 1 должно пройти НЕ МЕНЕЕ 18 тактов! Это будет соответствовать выключению
nCS сразу же после конца передачи.

Другие ограничения и требования для nCS могут быть найдены в соответствующих datasheet'ах на подключённые устройства.

Для интерфейса передачи mp3-данных существует только порт _SEND

Частота передачи (частота тактовых сигналов на выходе SCK spi-интерфейса) равна половине
процессорной частоты. Следует следить, чтобы частота передачи не превышала максимально допустимую
для данного устройства (см. datasheet).

Для управляющего интерфейса с MP3-декодером и для интерфейса передачи ему MP3-данных предусмотрено снижение скорости
передачи в 2 раза (биты _MPHLF=1, _MDHLF=1), в этом случае между запусками циклов обмена, а также от запуска обмена до
снятия nCS (для управляющего интерфейса) дожно проходить НЕ МЕНЕЕ 34 тактов.



 Интерфейс SD-карточки:

SD_SEND
SD_READ
SD_RSTR - см. выше про SPI-интерфейсы

_SDNCS - бит в порту S_CTRL (выход на карточку)
_SDWP  - бит в порту S_STAT (вход с карточки)
_SDDET - бит в порту S_STAT (вход с карточки)

_SDNCS - описанный выше nCS.  При сбросе NGS этот бит устанавливается в 1.

_SDWP - сигнал защиты записи. =1, если вставленная карточка "защищена" от записи, и =0,
если не "защищена": защита записи задаётся на карточке так же, как и на 3.5" дискете,
посредством пластмассового флажка. Его состояние фиксируется при помощи контактов в разъёме
под карточку

_SDDET - сигнал наличия карточки в разъёме. =1 - нет карточки, =0 - есть. Этот сигнал
также генерируется контактами в разъёме.



 Интерфейс mp3-чипа:

MD_SEND - SPI-канал для mp3-данных (только вывод байтов)

_MDHLF - управляет скоростью порта: =1 - пониженная в 2 раза скорость sck (Fz80/4), =0 - нормальная (Fz80/2)
         При сбросе этот бит устанавливается в 0. Применение - при пересылке данных в mp3-декодер на
         частотах процессора 20 и 24 МГц.



MC_SEND
MC_READ - управляющий SPI-канал mp3-декодера

_MPHLF - управляет скоростью порта: =1 - пониженная в 2 раза скорость sck (Fz80/4), =0 - нормальная (Fz80/2)
         При сбросе NGS этот бит устанавливается в 1. Применение - для начальной инициализации mp3-чипа
         (процессор на частоте 10 или 12 МГц), а также для управления инициализированным mp3-чипом при
         частоте процессора 20 или 24 МГц.

_MPNCS - бит в порту S_CTRL (выход на декодер): сигнал nCS для интерфейса с mp3-декодером.
         При сбросе NGS этот бит устанавливается в 1.

_MPXRS - бит в порту S_CTRL (выход на карточку): сигнал общего аппаратного сброса для mp3-декодера (XReSet),
         активный уровень - низкий. При сбросе NGS этот бит устанавливается в 0.

_MPDRQ - бит в порту S_STAT (вход с карточки): вход сигнала DREQ c mp3-декодера, =1: можно послать ещё до 32 байт mp3-потока
         =0: посылать ничего нельзя (в процессе посылки тех 32 байт этот сигнал нужно игнорировать).




 Порты SCTRL и SSTAT:

SSTAT: порт только на чтение.

 bit7 - (undef)
 bit6 - (undef)
 bit5 - (undef)
 bit4 - (undef)
 bit3 - (undef)
 bit2 - _SDWP  (уровень на входе)
 bit1 - _SDDET (уровень на входе)
 bit0 - _MPDRQ (уровень на входе)


SCTRL: порт на чтение и на запись.

При чтении:

 bit7 - (undef)
 bit6 - (undef)
 bit5 - (undef)
 bit4 - _MDHLF (текущее состояние бита скорости)
 bit3 - _MPHLF (текущее состояние бита скорости)
 bit2 - _MPXRS (текущее состояние выхода)
 bit1 - _MPNCS (текущее состояние выхода)
 bit0 - _SDNCS (текущее состояние выхода)

При записи:

 bit7 - _SETNCLR (=1 - установить в 1 выбранные выходы, =0 - установить в 0 выбранные выходы)
 bit6 - должен быть=0
 bit5 - должен быть=0
 bit4 - _MDHLF (=1 - бит выбран для установки в 0 или в 1)
 bit3 - _MPHLF (=1 - бит выбран для установки в 0 или в 1)
 bit2 - _MPXRS (=1 - бит выбран для установки в 0 или в 1)
 bit1 - _MPNCS (=1 - бит выбран для установки в 0 или в 1)
 bit0 - _SDNCS (=1 - бит выбран для установки в 0 или в 1)

Для установки какого-либо выхода в 0 или 1 необходимо в выводимом байте установить
соответствующий бит в 1, а 7 бит этого же байта установить 0 или 1, что соответственно
приведёт к установке выхода в 0 или в 1. Данный метод позволяет упростить управление одиночными
битами, а также осуществлять управление разными битами из разных потоков (например, в основном
цикле и в прерывании).

Примеры:

 ld A,%10000001
 out (SCTRL),A - установить _SDNCS в 1

 ld A,%00000010
 out (SCTRL),A - установить _MPNCS в 0

 ld A,%10000111
 out (SCTRL),A - установить сразу три бита в 1

 ld A,%00000101
 out (SCTRL),A - установить _MPXRS и _SDNCS в 0


