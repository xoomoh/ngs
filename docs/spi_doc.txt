  Порты управления последовательными интерфейсами.

 В NeoGS существует три последовательных SPI-интерфейса для работы с SD-картой,
для управления MP3-декодером и для выдачи данных в декодер. Каждый интерфейс
обладает своими свойствами, кроме того, для управления MP3-декодером
используются дополнительные (по отношению к SPI-интерфейсам) сигналы.
Дополнительные сигналы, равно как и некоторые свойства интерфейсов
контролируются через два порта: SSTAT и SCTRL.

 Порт SSTAT (только чтение) служит для чтения состояния некоторых сигналов,
имеющих отношение к устройствам и SPI-интерфейсам и содержит в себе биты
B_MDDRQ, B_SDDET, B_SDWP и B_MCRDY. Чтение порта возвращает текущее
состояние битов.

 Порт SCTRL (чтение или запись) служит для управления некоторыми сигналами,
имеющими отношение к устройствам и SPI-интерфейсам и содержит в себе биты
B_SDNCS, B_MCNCS, B_MPXRS, B_MCSPD0, B_MCSPD1 и B_MDHLF. Чтение этого порта
возвращает текущее состояние битов. Для изменения же состояния битов
используется следующая процедура.

 Для установки какого-либо отдельного бита в 1 в порт SCTRL записывается
число (1<<B_SETNCLR) + (1<<B_bit), где B_bit - один из вышеперечисленных битов
порта SCTRL, а B_SETNCLR - служебный бит этого порта.

 Для уставки отдельного бита в 0 в порт записывается число
(0<<B_SETNCLR) + (1<<B_bit).

 Одновременно перевести в 1 либо в 0 можно несколько бит, для чего следует набрать
их маску в записываемом числе (см. примеры).

 Таким образом, состояние бита B_SETNCLR в записываемом числе определяет, в какое
состояние (0 или 1) устанавливается тот или иной бит, в то время как остальные
биты записываемого числа выбирают биты порта, которые и требуется установить
в 0 либо в 1.

Примеры:

   ld   A,(0<<B_SETNCLR) + (1<<B_MPXRS) ;установить B_MPXRS в ноль
   out  (SCTRL),A

   ld   A,(1<<B_SETNCLR) + (1<<B_MDHLF) ;установить B_MDHLF в единицу
   out  (SCTRL),A

   ld   A,(1<<B_SETNCLR) + (1<<B_SDNCS) + (1<<B_MCNCS) ;установить B_SDNCS и B_MCNCS в единицу
   out  (SCTRL),A

   ld   A,(0<<B_SETNCLR) + (1<<B_MCSPD1) + (1<<B_MCSPD0) ;сначала очистить биты B_MCSPD1 и B_MCSPD1
   out  (SCTRL),A
   ld   A,(1<<B_SETNCLR) + (1<<B_MCSPD1) + (0<<B_MCSPD0) ;затем установить их в состояние {B_MCSPD1,B_MCSPD0}={1,0}
   out  (SCTRL),A

 Данная схема управления битами позволяет управлять различными битами из различных задач:
например основной код может управлять битом B_MCNCS, в то время как код в прерывании может
управлять битом B_SDNCS. Так как каждое отдельное изменение битов в порту является атомарным
и не влияет на другие биты порта, не требуется запрещать прерывания на моменты изменения битов,
что потребовалось бы при традиционном подходе (di:in A,(port):and MASK:or BITS:out (port),A:ei).

 Конкретное назначение битов в портах SCTRL и SSTAT описано ниже в главах *SPI-интерфейсы*,
*Работа с SD-картой* и *Работа с MP3-декодером*.


  SPI-интерфейсы.

SPI-интерфейсы используются для управления и обмена данными с SD-картой и MP3-декодером.
SPI-мастер (схема, осуществляющая тактирование на SPI-шине) находится в FPGA и управляется
процессором Z80, SPI-слейв (схема, тактируемая мастером) находится в том или ином устройстве.

 Далее приводится обобщённое описание SPI-интерфейса с точки зрения программиста. В NeoGS используется
три специализированных SPI-интерфейса, один из которых обменивается данными с SD-картой, другой -
с управляющим каналом MP3-декодера, а последний - посылает MP3-данные в декодер. Каждый
из них может не поддерживать полный набор свойств, приведённых в обобщённом описании.

 Обмен данными через SPI-интерфейс производится побайтно. В процессе каждого обмена
аппаратно производится передача байта от FPGA к устройству и одновременно приём байта
от устройства по двунаправленной последовательной SPI-шине. Эта шина состоит из сигналов
MOSI (выход SPI-мастера и вход SPI-слейва, последовательная передача данных от мастера слейву),
MISO (вход SPI-мастера и выход SPI-слейва, последовательная передача данных от слейва мастеру) и
SCK (выход SPI-мастера и вход SPI-слейва, сигнал синхронизации передачи). Управление
вышеописанными сигналами осуществляется полностью аппаратно, без участия процессора Z80.

 В зависимости от используемого протокола работы с устройством,
значение могут иметь оба байта, переданных в разных направлениях, один из них или
ни одного (значение имеет только сам факт обмена).

 SPI-интерфейс содержит также сигнал выборки NCS. Процесс обмена, как правило, выглядит
следующим образом: процессор Z80 переводит сигнал NCS из неактивного (=1) в активное (=0)
состояние, далее следует серия обменов байтами, после окончания которой процессор
возвращает сигнал NCS в неактивное состояние (=1). В некоторых случаях требуется
начинать обмен при неактивном состоянии NCS, при этом, как правило, имеет значение
сам факт обмена (наличие тактирования сигналом SCK на SPI-шине), в то время как передаваемые данные
игнорируются обоими участниками обмена (мастером и слейвом).

 Процесс обмена байтами по SPI-шине инициируется процессором Z80 путём записи байта в порт
_SEND. Записанный байт передаётся устройству, в то время как принятый в обмене байт сохраняется
в временном регистре SPI-интерфейса. После окончания обмена принятый байт из временного регистра
можно считать из порта _READ. Из порта _RSTR считывается тот же байт из временного регистра,
однако факт чтения этого порта также запускает обмен по SPI-шине с передаваемым байтом 0xFF.
Таким образом, команды
   in   A,(_RSTR)
   ld   B,A
эквивалентны с точки зрения передаваемых по SPI-шине данных командам
   in   A,(_READ)
   ld   B,A
   ld   A,0xFF
   out  (_SEND),A

 Процесс байтового обмена, инициированный записью в порт _SEND или чтением из порта _RSTR, занимает
конечное время. SPI-интерфейсы тактируются частотой процессора Z80 Fcpu. Однако сигнал SCK, являясь выходом
синхронной схемы SPI-интерфейса, может иметь частоты Fcpu/2, Fcpu/4, Fcpu/8 или Fcpu/16. В NeoGS
не предусмотрен сигнал /WAIT для процессора Z80, следовательно между последовательными инициированиями
обмена (запись в _SEND или чтение _RSTR) должна программно формироваться пауза в определённое число
тактов процессора Z80. Кроме того, пауза должна соблюдаться между инициированием обмена и чтением принятого
байта (чтение _READ или _RSTR), а также между инициированием обмена и установкой NCS в неактивное состояние.
В SPI-интерфейсе предусмотрен также бит готовности RDY, который устанавливается в 0 сразу же после
инициирования обмена и возвращается в 1, как только обмен закончился. Данный бит используется, как правило,
в случае низких частот сигнала SCK (например, Fcpu/8 и ниже) для упрощения процедур обмена.

-------------+------------------------------------+-----------------------------------
 Частота SCK,| Пауза между инициированиями обмена | Пауза между инициированием обмена
    Fsck     | или между инициированием обмена и  | и снятием активного уровня NCS,
             | чтением принятого байта, такты Z80 | такты Z80
-------------+------------------------------------+-----------------------------------
     Fcpu/2  | 16 (использовать RDY неэффективно) | 18 (использовать RDY неэффективно)
     Fcpu/4  | 34 или используйте бит RDY         | 34 или используйте бит RDY
     Fcpu/8  | используйте бит RDY                | используйте бит RDY
     Fcpu/16 | используйте бит RDY                | используйте бит RDY
-------------+------------------------------------+-----------------------------------

Под словами "пауза между инициированием обмена и чем-либо" подразумевается количество
тактов Z80 между началом циклов ввода-вывода, осуществляющих описанные действия. Примеры:

   ld   C,_SEND
   out  (C),D
   nop
   out  (C),E ; выдержана пауза 16 тактов, используйте для работы на Fsck=Fcpu/2

   ld   C,_READ
   out  (_SEND),A
   nop
   in   A,(C) ; выдержана пауза 16 тактов, используйте для работы на Fsck=Fcpu/2

   ld   C,_SEND
   ld   HL,buffer
   outi
   outi ; выдержана пауза 16 тактов, используйте для работы на Fsck=Fcpu/2

   ld   C,_RSTR
   ld   HL,buffer
   ini
   ini ; выдержана пауза 16 тактов, используйте для работы на Fsck=Fcpu/2

   ld   C,_SEND
   out  (C),A
   nop
   in   A,(_READ) ; НЕВЕРНО!!!! пауза между циклами ввода-вывода составляет 15 тактов!!!!!!

 Различные SPI-интерфейсы являются полностью независимыми, соблюдение пауз относится к последовательным
обращениям к одному и тому же интерфейсу, например:

   ld   C,SD_RSTR   ;чтение данных с SD-карты и немедленная пересылка их в MP3-декодер
   in   A,(C)       ;предполагается, что оба интерфейса работают на Fsck=Fcpu/2
   out  (MD_SEND),A ;интерфейсы независимы, немедленная пересылка байта
   in   A,(C)       ;между инициированиями обмена на SPI-интерфейсе SD-карты пауза составляет 23 такта
   out  (MD_SEND),A ;между инициированиями обмена на SPI-интерфейсе MP3-декодера пауза составляет 23 такта


  SPI-интерфейс SD-карты.

 Как упоминалось выше, конкретная реализация SPI-интерфейса не обладает всеми свойствами обобщённого описания.
SPI-интерфейс, используемый для обмена с SD-картой, обладает лишь следующими свойствами.

 Порт посылки байта и инициирования обмена: SD_SEND
 Порт чтения принятого байта: SD_READ
 Порт чтения принятого байта и инициирования следующего обмена с посылаемым байтом 0xFF: SD_RSTR
 Бит управления сигналом NCS для SD-карты, находящийся в порту SCTRL: B_SDNCS

 Частота SCK фиксирована и составляет Fsck=Fcpu/2, бит RDY отсутствует, следовательно
 требуется программное соблюдение пауз 16 или 18 тактов.


  Управляющий SPI-интерфейс MP3-декодера.

 Этот интерфейс обладает следующими свойствами.

 Порт посылки байта и инициирования обмена: MC_SEND
 Порт чтения принятого байта: MC_READ
 Порт чтения и инициирования обмена отсутствует.

 Бит управления сигналом NCS для MP3-декодера, находящийся в порту SCTRL: B_MCNCS
 Бит готовности SPI-интерфейса в порту SSTAT: B_MCRDY

ВНИМАНИЕ! Следует чётко различать биты B_MCRDY и B_MDDRQ в порту SSTAT.

Бит B_MCRDY относится к управляющему SPI-интерфейсу MP3-декодера, отражает состояние
готовности интерфейса и генерируется схемой этого SPI-интерфейса в FPGA.

Бит B_MDDRQ относится к SPI-интерфейсу MP3-данных декодера, и отражает готовность
декодера принять очередной блок данных по этому интерфейсу. Сигнал генерируется декодером
и просто транслируется FPGA с выхода декодера в бит порта SSTAT.

 Биты установки частоты Fsck управляющего интерфейса MP3-декодера B_MCSPD0 и B_MCSPD1 в порту SCTRL.

---------------------+---------
 {B_MCSPD1,B_MCSPD0} | Fsck
---------------------+---------
               {0,0} | Fcpu/2
               {0,1} | Fcpu/4
               {1,0} | Fcpu/8
               {1,1} | Fcpu/16
---------------------+---------


  SPI-интерфейс MP3-данных декодера.

 Порт посылки байта и инициирования обмена MD_SEND
 Порт чтения принятого байта - отсутствует.
 Порт чтения и инициирования - отсутствует.

 сигнал NCS и управление им - отсуствует.
 Бит готовности интерфейса - отсутствует (следует соблюдать паузы программно).

 Бит установки частоты Fsck интерфейса данных B_MDHLF в порту SCTRL:

---------+--------
 B_MDHLF | Fsck
---------+--------
       0 | Fcpu/2
       1 | Fcpu/4
---------+--------

Частоты Fcpu/8 и Fcpu/16 не поддерживаются.


  Работа с SD-картой.

 Для работы с SD-картой используется аппаратный SPI-интерфейс, описание которого находится в главе *SPI-интерфейсы*

 Кроме данного интерфейса предусмотрены также биты B_SDDET и B_SDWP в порту SSTAT.
 B_SDDET равен нулю (???) при наличии карты в слоте, иначе единица
 B_SDWP равен нулю (???) при установленной на карте защите записи (при помощи флажка на корпусе карты), иначе единица.

ВНИМАНИЕ! оба сигнала генерятся механическими контактами в слоте SD-карты, следовательно имеют дребезг.
Контакты также могут нарушаться (например, если место контакта загрязнено), и как следствие, могут
выдавать ложные показания (единица, когда должен быть нуль).
Флажок защиты от записи никак не связан электрически с электроникой SD-карты, следовательно записывать на
карту можно и при состоянии сигнала B_SDWP=0. Аналогией является флажок защиты от записи на гибких магнитных
дисках - однако он, в отличие от B_SDWP используется аппаратно в контроллере дисковода и самом дисководе.
Кроме того, на платах NeoGS rev.A сигнал B_SDDET повторяет состояние светодиода (горит - 0, не горит - 1).
На платах NeoGS rev.B он определяется контактами на слоте SD-карты.

Не рекомендуется использовать данные сигналы в программах. Наличие в слоте SD-карты следует определять
программно (удаётся ли провести инициализацию карты за конечное время).

 Протоколы программного обмена с картой следует искать в стандартах на SD-карты.

 Частота процессора в NeoGS варьируется от 10 до 24 МГц, следовательно, частота Fsck изменяется
от 5 до 12 МГц, что лежит в пределах спецификаций SD-карт на эту частоту (не более 25 МГц).

 Порт SD_RSTR, который выдаёт предыдущий принятый байт и инициирует обмен с передаваемым байтом 0xFF,
может использоваться для всех сценариев обмена данными и командами с SD-картой по аналогии работы с
интерфейсом SD-карты в Z-controller'е, следует лишь помнить про программные паузы 16 или 18 тактов.


  Работа с MP3-декодером.

 Помимо двух SPI-интерфейсов (см. главу *SPI-интерфейсы*), для управления декодером используются
следующие сигналы:

 сигнал в декодер, управляемый битом B_MPXRS в порту SCTRL - аппаратный сброс декодера когда бит в нуле,
 нормальная работа когда бит в единице.

 сигнал с декодера, состояние которого отражается в бите B_MDDRQ порта SSTAT - готовность приёма порции
 MP3-данных через соответствующий SPI-интерфейс (MD_SEND).

 В NeoGS используются MP3-декодеры двух типов: MA8201 и MA8201A, которые являются аналогами, соответственно,
декодеров VS1001 и VS1011 фирмы VLSI Solutions Oy (http://www.vlsi.fi). Подробные описания и принципы работы
следует искать в даташитах (datasheets) и аппнотах (application notes) на микросхемы фирмы VLSI Solutions Oy
на их интернет-сайте. Дальнейшее обсуждение MP3-декодеров в данном руководстве подразумевает предварительное
ознакомление читателя с указанными документами.

 Здесь приведены лишь особо существенные замечания.

 1. Декодеры тактируются кварцевым резонатором 14 МГц, что является небольшим превышением
    официальной максимальной частоты согласно даташитам. Для нормальной работы (декодирование
    MP3-файлов с любым битрейтом) следует ОБЯЗАТЕЛЬНО использовать внутреннее удвоение тактовой
    частоты, предусмотренное в декодерах (рабочая частота 28 МГц).

 2. Максимальные частоты Fsck для обоих SPI-интерфейсов декодера ограничены следующими величинами.
    При передаче байтов по управляющему интерфейсу (содержимое MC_READ не используется),
    равно как и по интерфейсу MP3-данных частота сигнала SCK соответсвуюшего интерфейса Fsck < Fdec/4,
    где Fdec - частота, на которой работает декодер (Fdec=14 МГц, если внутреннее удвоение выключено,
    или Fdec=28 МГц в противном случае).

    При приёме байтов по управляющему интерфейсу (содержимое MC_READ используется) Fsck < Fdec/6.

    В обоих случаях следует учитывать текущую частоту процессора Z80, состояние битов, задающих
    Fsck каждого интерфейса (B_MCSPD1,B_MCSPD0,B_MDHLF) и то, включено ли внутреннее удвоение
    тактовой частоты декодера или выключено.

 3. После аппаратного или программного сброса внутреннее удвоение оказывается выключенным.
    Следует его включить, процедура включения отличается для разных (VS1001 и VS1011) декодеров.
    В случае VS1001 после установки регистра CLOCKF следует записать константу 0x8008 в недокументированный
    регистр INT_FCNTLH (см. аппнот vs10XXan.pdf). В случае VS1011 на месте регистра INT_FCNTLH оказывается
    другой по функции регистр и запись в него производить не требуется, а для включения удвоителя требуется
    записать значение частоты дискретизации (любое применимое) в регистр AUDATA (см. аппнот vs10XXan.pdf).
    В дальнейшем актуальное значение частоты дискретизации установится автоматически. В обоих случаях константа,
    записываемая в регистр CLOCKF, остаётся неизменной (0x9B58).

 4. для определения типа декодера (VS1001 или VS1011) следует прочитать регистр STATUS и заглянуть
    в биты 7:4 этого регистра. Так как определять тип декодера требуется до включения удвоителя (пункт 3),
    следует особо внимательно отнестись к пункту 2: Fdec/6 в этом случае составит 2.3 МГц, и Fsck
    для корректного чтения не должна быть более этого значения (см. главу *SPI-интерфейсы*).

 5. При проигрывании некорректного или испорченного MP3-файла, вследствие электромагнитных помех и т.д.
    декодер может зависнуть: при этом, как правило, проигрывание звука прекращается, а счётчик времени
    проигрывания (регистр DECODE_TIME) не инкрементируется. Также признаком зависания является чересчур
    низкая или череcчур высокая скорость потребления декодером MP3-данных (см. аппнот vs10XXan.pdf).
    При обнаружении зависания необходимо выполнить программный сброс, повторить процедуру инициализации
    и вновь обратить внимание на признаки зависания. В случае, если декодер не 'отвис', необходимо
    провести аппататный сброс (бит B_MPXRS в порту SCTRL).

    Грубый замер скорости потребления декодером MP3-данных можно провести, используя как репер
    звуковые прерывания NeoGS, следующие с частотой 37500 Гц независимо от частоты процессора Z80.

 6. После окончания данных в MP3-файле рекомендуется выдать в декодер 2048 байт нулей (B_MDDRQ, MD_SEND),
    после чего для начала декодирования следующего файла необходимо провести программный сброс.
    Применять вместо него аппаратный сброс не рекомендуется, так как при этом возникают щелчки
    в звуковом тракте декодера.

 7. Следует отметить, что управление режимами bass/treble и surround в обоих типах декодеров
    существенно различается.

 8. В декодере VS1011 предусмотрено несколько режимов посылки MP3-данных. Следует использовать лишь
    установленный по умолчанию после сброса режим совместимости с декодером VS1001 с участием сигнала
    битовой синхронизации BSYNC. Сигнал BSYNC генерируется аппаратно схемой SPI-интерфейса для
    MP3-данных в FPGA и внимания к себе со стороны программы Z80 не требует.

